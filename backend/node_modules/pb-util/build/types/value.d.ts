import { JsonObject, Struct } from './struct';
import { JsonArray, ListValue } from './list';
/**
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray;
/**
 * @typedef {Object} Value
 * @property {string} kind The kind of value. Valid values for this fields are
 *     - `nullValue`
 *     - `numberValue`
 *     - `stringValue`
 *     - `boolValue`
 *     - `structValue`
 *     - `listValue`
 * @property {number} [nullValue] Represents a null value, actual field value
 *     should be `0`.
 * @property {number} [numberValue] Represents a number.
 * @property {string} [stringValue] Represents a string.
 * @property {boolean} [boolValue] Represents a boolean.
 * @property {Struct} [structValue] Represents an object.
 * @property {ListValue} [listValue] Represents an array of values.
 */
export interface Value {
    kind?: string;
    nullValue?: number;
    numberValue?: number;
    stringValue?: string;
    boolValue?: boolean;
    structValue?: Struct;
    listValue?: ListValue;
}
/**
 * Used to encode/decode {@link Value} objects.
 */
export declare const value: {
    /**
     * Encodes a JSON value into a protobuf {@link Value}.
     *
     * @param {*} value The JSON value.
     * @returns {Value}
     */
    encode(value: JsonValue): Value;
    /**
     * Decodes a protobuf {@link Value} into a JSON value.
     *
     * @param {Value} value the protobuf value.
     * @returns {*}
     */
    decode(value: Value): JsonValue;
};
