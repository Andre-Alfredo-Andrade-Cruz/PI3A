"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const struct_1 = require("./struct");
const list_1 = require("./list");
const toString = Object.prototype.toString;
const encoders = {
    [typeOf({})]: v => wrap('structValue', struct_1.struct.encode(v)),
    [typeOf([])]: v => wrap('listValue', list_1.list.encode(v)),
    [typeOf(0)]: v => wrap('numberValue', v),
    [typeOf('')]: v => wrap('stringValue', v),
    [typeOf(true)]: v => wrap('boolValue', v),
    [typeOf(null)]: () => wrap('nullValue', 0)
};
function typeOf(value) {
    return toString.call(value);
}
function wrap(kind, value) {
    return { kind, [kind]: value };
}
/**
 * Used to encode/decode {@link Value} objects.
 */
exports.value = {
    /**
     * Encodes a JSON value into a protobuf {@link Value}.
     *
     * @param {*} value The JSON value.
     * @returns {Value}
     */
    encode(value) {
        const type = typeOf(value);
        const encoder = encoders[type];
        if (typeof encoder !== 'function') {
            throw new TypeError(`Unable to infer type for "${value}".`);
        }
        return encoder(value);
    },
    /**
     * Decodes a protobuf {@link Value} into a JSON value.
     *
     * @param {Value} value the protobuf value.
     * @returns {*}
     */
    decode(value) {
        if (value.listValue) {
            return list_1.list.decode(value.listValue);
        }
        if (value.structValue) {
            return struct_1.struct.decode(value.structValue);
        }
        if (typeof value.nullValue !== 'undefined') {
            return null;
        }
        return value[value.kind];
    }
};
//# sourceMappingURL=value.js.map